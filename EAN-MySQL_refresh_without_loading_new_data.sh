#!/bin/bash
#########################################################################
## Process tested in Windows, using Cygwin                             ##
## other than the default of the instalation you will need to install: ##
## -> wget                                                             ##
## -> unzip                                                            ##
## -> md5deep (as there is no md5sum or cksum on Cygwin)               ##
## -> database client MySQL                                            ##
## you can select by searching for them in the Cygwin packages during  ##
## the install.                                                        ##
#########################################################################

### Environment ###
STARTTIME=$(date +%s)
## for Linux: CHKSUM_CMD=md5sum
## for Windows Cygwin you may use alternate: http://md5deep.sourceforge.net
## cksum should be available in all Unix versions, leave it blank to force a refresh everytime it runs
## but that will avoid the overhead and I/O generated by this functionality
CHKSUM_CMD=md5sum
MYSQL_DIR=/usr/bin/
# for simplicity I added the MYSQL bin path to the Windows 
# path environment variable, for Windows set it to ""
#MYSQL_DIR=""
# after MySQL 5.6+ we depend on the mysql_config_editor to
# save the connections credentials (host, user, password)
# then we can use: --login-path={name of your connection}
MYSQL_LOGINPATH=local
#MySQL user, password, host (Server)
MYSQL_USER=eanuser
MYSQL_PASS=Passw@rd1
MYSQL_HOST=localhost
MYSQL_DB=eanprod
# home directory of the user (in our case "eanuser")
HOME_DIR=/home/eanuser
# protocol TCP All, SOCKET Unix only, PIPE Windows only, MEMORY Windows only
MYSQL_PROTOCOL=TCP
# 3336 as default,MAC using MAMP is 8889
MYSQL_PORT=3306
## directory under HOME_DIR
FILES_DIR=eanfiles
## retention period in DAYS for the log of ActivePropertyList changes
LOG_DAYS=30

## Import files ###
#####################################
# the list should match the tables ##
# created by create_ean.sql script ##
#####################################
FILES=(

PropertyAttributeLink
AttributeList
HotelImageList
ActivePropertyList
PropertyTypeList
PropertyDescriptionList

PropertyAttributeLink_es_ES
AttributeList_es_ES
HotelImageList_es_ES
ActivePropertyList_es_ES
PropertyTypeList_es_ES
PropertyDescriptionList_es_ES

PropertyAttributeLink_de_DE
AttributeList_de_DE
HotelImageList_de_DE
ActivePropertyList_de_DE
PropertyTypeList_de_DE
PropertyDescriptionList_de_DE

PropertyAttributeLink_fr_FR
AttributeList_fr_FR
HotelImageList_fr_FR
ActivePropertyList_fr_FR
PropertyTypeList_fr_FR
PropertyDescriptionList_fr_FR

PropertyAttributeLink_nl_NL
AttributeList_nl_NL
HotelImageList_nl_NL
ActivePropertyList_nl_NL
PropertyTypeList_nl_NL
PropertyDescriptionList_nl_NL

PropertyAttributeLink_cs_CZ
AttributeList_cs_CZ
HotelImageList_cs_CZ
ActivePropertyList_cs_CZ
PropertyTypeList_cs_CZ
PropertyDescriptionList_cs_CZ

PropertyAttributeLink_da_DK
AttributeList_da_DK
HotelImageList_da_DK
ActivePropertyList_da_DK
PropertyTypeList_da_DK
PropertyDescriptionList_da_DK

PropertyAttributeLink_el_GR
AttributeList_el_GR
HotelImageList_el_GR
ActivePropertyList_el_GR
PropertyTypeList_el_GR
PropertyDescriptionList_el_GR

PropertyAttributeLink_hu_HU
AttributeList_hu_HU
HotelImageList_hu_HU
ActivePropertyList_hu_HU
PropertyTypeList_hu_HU
PropertyDescriptionList_hu_HU

PropertyAttributeLink_it_IT
AttributeList_it_IT
HotelImageList_it_IT
ActivePropertyList_it_IT
PropertyTypeList_it_IT
PropertyDescriptionList_it_IT

PropertyAttributeLink_lt_LT
AttributeList_lt_LT
HotelImageList_lt_LT
ActivePropertyList_lt_LT
PropertyTypeList_lt_LT
PropertyDescriptionList_lt_LT

PropertyAttributeLink_no_NO
AttributeList_no_NO
HotelImageList_no_NO
ActivePropertyList_no_NO
PropertyTypeList_no_NO
PropertyDescriptionList_no_NO

PropertyAttributeLink_pl_PL
AttributeList_pl_PL
HotelImageList_pl_PL
ActivePropertyList_pl_PL
PropertyTypeList_pl_PL
PropertyDescriptionList_pl_PL

PropertyAttributeLink_pt_PT
AttributeList_pt_PT
HotelImageList_pt_PT
ActivePropertyList_pt_PT
PropertyTypeList_pt_PT
PropertyDescriptionList_pt_PT

PropertyAttributeLink_sv_SE
AttributeList_sv_SE
HotelImageList_sv_SE
ActivePropertyList_sv_SE
PropertyTypeList_sv_SE
PropertyDescriptionList_sv_SE

)

## home where the process will execute
#cd C:/data/EAN/DEV/database
## this will be CRONed so it needs the working directory absolute path
## change to your user home directory
cd ${HOME_DIR}

echo "Starting at working directory..."
pwd
## create subdirectory if required
if [ ! -d ${FILES_DIR} ]; then
   echo "creating download files directory..."
   mkdir ${FILES_DIR}
fi

## all clear, move into the working directory
cd ${HOME_DIR}

echo "Starting at working directory..."
pwd
## create subdirectory if required
if [ ! -d ${FILES_DIR} ]; then
   echo "creating download files directory..."
   mkdir ${FILES_DIR}
fi

## all clear, move into the working directory
cd ${FILES_DIR}

### Parameters that you may need:
### If you use LOW_PRIORITY, execution of the LOAD DATA statement is delayed until no other clients are reading from the table.
CMD_MYSQL="${MYSQL_DIR}mysql  --local-infile=1 --default-character-set=utf8 --protocol=${MYSQL_PROTOCOL} --port=${MYSQL_PORT} --user=${MYSQL_USER} --password=${MYSQL_PASS} --host=${MYSQL_HOST} --database=${MYSQL_DB}"
# for version 5.6.6+ you will need this line instead to use stored credentials
#CMD_MYSQL="${MYSQL_DIR}mysql --login-path=${MYSQL_LOGINPATH} --local-infile=1 --default-character-set=utf8 --protocol=${MYSQL_PROTOCOL} --port=${MYSQL_PORT} --database=${MYSQL_DB}"
#
for FILE in ${FILES[@]}
do
    records=`wc -l < $FILE.txt | tr -d ' '`
    (( records-- ))
    ## check if we need to update or not based on file changed, file contains at least 1x record
    ## file is readeable, file NOT empty, file unzipped w/o errors
    if [ "$records" -gt 0 ] && [ -s ${FILE}.txt ] && [ -r ${FILE}.txt ]; then
		## table name are lowercase
   		tablename=`echo $FILE | tr "[[:upper:]]" "[[:lower:]]"`
        ## checking if working with activepropertybusinessmodel to make a backup of it before changes
        if [ $tablename = "activepropertybusinessmodel" ]; then
			echo "Running a backup of ActivePropertyBusinessModel..."
			### Run stored procedures as required for extra functionality       ###
			### you can use this section for your own stuff                     ###
			CMDSP_MYSQL="${MYSQL_DIR}mysql  --default-character-set=utf8 --protocol=${MYSQL_PROTOCOL} --port=${MYSQL_PORT} --user=${MYSQL_USER} --password=${MYSQL_PASS} --host=${MYSQL_HOST} --database=eanprod"
			# for version 5.6.6+ you will need this line instead to use stored credentials
			#CMDSP_MYSQL="${MYSQL_DIR}mysql --login-path=${MYSQL_LOGINPATH} --default-character-set=utf8 --protocol=${MYSQL_PROTOCOL} --port=${MYSQL_PORT} --database=eanprod"
			$CMDSP_MYSQL --execute="CALL eanprod.sp_log_createcopy();"
			echo "ActivePropertyBusinessModel backup done."
        fi
		### Update MySQL Data ###
   		echo "Uploading ($FILE.txt) to ($MYSQL_DB.$tablename) with REPLACE option..."
		## if you have limited resources use this line instead to avoid creating the transaction log
		## you will need to give grant SUPER to the user, for it to work
   		## $CMD_MYSQL --execute="set foreign_key_checks=0; set sql_log_bin=0; set unique_checks=0; LOAD DATA LOCAL INFILE '$FILE.txt' REPLACE INTO TABLE $tablename CHARACTER SET utf8 FIELDS TERMINATED BY '|' IGNORE 1 LINES;"
   		$CMD_MYSQL --execute="LOAD DATA LOCAL INFILE '$FILE.txt' REPLACE INTO TABLE $tablename CHARACTER SET utf8 FIELDS TERMINATED BY '|' IGNORE 1 LINES;"
   		## we need to erase the records, NOT updated today
   		echo "erasing old records from ($tablename)..."
   		$CMD_MYSQL --execute="DELETE FROM $tablename WHERE datediff(TimeStamp, now()) < 0;"
        ## checking if working with activepropertybusinessmodel to fill the changed log table
        if [ $tablename = "activepropertybusinessmodel" ]; then
			echo "Creating log of changes for ActivePropertyBusinessModel..."
			### Run stored procedures as required for extra functionality       ###
			### you can use this section for your own stuff                     ###
			CMDSP_MYSQL="${MYSQL_DIR}mysql  --default-character-set=utf8 --protocol=${MYSQL_PROTOCOL} --port=${MYSQL_PORT} --user=${MYSQL_USER} --password=${MYSQL_PASS} --host=${MYSQL_HOST} --database=eanprod"
			# for version 5.6.6+ you will need this line instead to use stored credentials
			#CMDSP_MYSQL="${MYSQL_DIR}mysql --login-path=${MYSQL_LOGINPATH} --default-character-set=utf8 --protocol=${MYSQL_PROTOCOL} --port=${MYSQL_PORT} --database=eanprod"
			$CMDSP_MYSQL --execute="CALL eanprod.sp_log_addedrecords();"
			$CMDSP_MYSQL --execute="CALL eanprod.sp_log_erasedrecords();"
			$CMDSP_MYSQL --execute="CALL eanprod.sp_log_erase_common();"
			$CMDSP_MYSQL --execute="CALL eanprod.sp_log_erase_deleted();"
			$CMDSP_MYSQL --execute="CALL eanprod.sp_log_changedrecords();"
			### erase records before retention period
			$CMDSP_MYSQL --execute="DELETE FROM log_activeproperty_changes WHERE TimeStamp < DATE_SUB(NOW(), INTERVAL $LOG_DAYS DAY);"
			echo "Log for ActivePropertyBusinessModel done."
        fi
    fi
done
echo "Updates done."

echo "Running Extras ... Stored Procedures..."
### Run stored procedures as required for extra functionality       ###
### you can use this section for your own stuff                     ###
CMD_MYSQL="${MYSQL_DIR}mysql  --default-character-set=utf8 --protocol=${MYSQL_PROTOCOL} --port=${MYSQL_PORT} --user=${MYSQL_USER} --password=${MYSQL_PASS} --host=${MYSQL_HOST} --database=eanextras"
# for version 5.6.6+ you will need this line instead to use stored credentials
#CMD_MYSQL="${MYSQL_DIR}mysql --login-path=${MYSQL_LOGINPATH} --default-character-set=utf8 --protocol=${MYSQL_PROTOCOL} --port=${MYSQL_PORT} --database=eanextras"
#$CMD_MYSQL --execute="CALL eanextras.sp_fill_fasttextsearch();"
echo "Extras Stored Procedures done."


echo "Verify database against files..."
### Verify entries in tables against files ###
CMD_MYSQL="${MYSQL_DIR}mysqlshow --count ${MYSQL_DB} --protocol=${MYSQL_PROTOCOL} --port=${MYSQL_PORT} --user=${MYSQL_USER} --password=${MYSQL_PASS} --host=${MYSQL_HOST}"
# for version 5.6.6+ you will need this line instead to use stored credentials
#CMD_MYSQL="${MYSQL_DIR}mysqlshow --login-path=${MYSQL_LOGINPATH} --count ${MYSQL_DB} --protocol=${MYSQL_PROTOCOL} --port=${MYSQL_PORT} --user=${MYSQL_USER} --password=${MYSQL_PASS} --host=${MYSQL_HOST}"
$CMD_MYSQL

### find the amount of records per datafile
### should match to the amount of database records
echo "+---------------------------------+----------+------------+"
echo "|             File                |       Records         |"
echo "+---------------------------------+----------+------------+"
for FILE in ${FILES[@]}
do
## to count the number of output records minus the header
##    records=$(($(wc -l $FILE.txt | awk '{print $1}')-1))
   records=`wc -l < $FILE.txt | tr -d ' '`
   (( records-- ))
   { printf "|" && printf "%33s" $FILE && printf "|" && printf "%23d" $records && printf "|\n"; }
done
echo "+---------------------------------+----------+------------+"
echo "Verify done."

## display endtime for the script
ENDTIME=$(date +%s)
secs=$(( $ENDTIME - $STARTTIME ))
h=$(( secs / 3600 ))
m=$(( ( secs / 60 ) % 60 ))
s=$(( secs % 60 ))
printf "total script time: %02d:%02d:%02d\n" $h $m $s
echo "script (import_db.sh) done."